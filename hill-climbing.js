// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.HillClimbing = (function(_super) {
    __extends(HillClimbing, _super);

    function HillClimbing() {
      _ref = HillClimbing.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    HillClimbing.prototype.climbing = function() {
      var g, ratio, _i, _len, _ref1, _results;
      ratio = this.evaluate(this.pageSets);
      this.groupSets = pageUtils.grouping(this.pageSets);
      this.sort(this.groupSets);
      _ref1 = this.groupSets;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        g = _ref1[_i];
        _results.push(console.log(g[0].originalPriority, g[0].rect));
      }
      return _results;
    };

    HillClimbing.prototype.evaluate = function(pageSets) {
      var diff, page, r, ratioDiff, type, _i, _j, _len, _len1, _ref1;
      ratioDiff = 0;
      for (_i = 0, _len = pageSets.length; _i < _len; _i++) {
        page = pageSets[_i];
        r = 100000000000;
        _ref1 = rectTypes[page.type];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          type = _ref1[_j];
          diff = 0;
          if (page.rect.ratio() - type.ratio < 0) {
            diff = Math.pow(page.rect.ratio() / type.ratio, 2);
          } else {
            diff = Math.pow(type.ratio / page.rect.ratio(), 2);
          }
          r = Math.min(r, diff);
        }
        ratioDiff += r;
      }
      return ratioDiff;
    };

    HillClimbing.prototype.sort = function(pageSets) {
      return pageSets.sort(function(a, b) {
        if (a[0].rect.x === b[0].rect.x) {
          return a[0].rect.y - b[0].rect.y;
        }
        return a[0].rect.x - b[0].rect.x;
      });
    };

    HillClimbing.prototype.shuffle = function(pageSets) {};

    return HillClimbing;

  })(GreedyLayout);

}).call(this);
